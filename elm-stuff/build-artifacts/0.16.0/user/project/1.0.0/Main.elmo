Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Char = Elm.Char.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Touch = Elm.Touch.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var quadTuple = F4(function (a,b,c,d) {
      return {ctor: "_Tuple4",_0: a,_1: b,_2: c,_3: d};
   });
   var timerStyle = F2(function (color,size) {
      return {typeface: _U.list(["Arial"])
             ,height: $Maybe.Just(size)
             ,color: color
             ,bold: true
             ,italic: false
             ,line: $Maybe.Nothing};
   });
   var plus = function (color) {
      return $Graphics$Collage.group(_U.list([A2($Graphics$Collage.filled,
                                             color,
                                             A2($Graphics$Collage.rect,4,12))
                                             ,A2($Graphics$Collage.filled,
                                             color,
                                             A2($Graphics$Collage.rect,12,4))]));
   };
   var heart = F2(function (color,size) {
      return $Graphics$Collage.group(_U.list([A2($Graphics$Collage.moveY,
                                             size / 2,
                                             A2($Graphics$Collage.filled,
                                             color,
                                             $Graphics$Collage.circle(size / 2)))
                                             ,A2($Graphics$Collage.moveX,
                                             size / 2,
                                             A2($Graphics$Collage.filled,
                                             color,
                                             $Graphics$Collage.circle(size / 2)))
                                             ,A2($Graphics$Collage.filled,
                                             color,
                                             $Graphics$Collage.square(size))]));
   });
   var scoreStyle = function (color) {
      return {typeface: _U.list(["Arial"])
             ,height: $Maybe.Just(24)
             ,color: color
             ,bold: true
             ,italic: false
             ,line: $Maybe.Nothing};
   };
   var victoryStyle = function (color) {
      return {typeface: _U.list(["Arial"])
             ,height: $Maybe.Just(60)
             ,color: color
             ,bold: true
             ,italic: false
             ,line: $Maybe.Nothing};
   };
   var opStyle = function (color) {
      return {typeface: _U.list(["Arial"])
             ,height: $Maybe.Just(16)
             ,color: color
             ,bold: true
             ,italic: false
             ,line: $Maybe.Nothing};
   };
   var operator = F2(function (op,z) {
      var pos = -6;
      var _p0 = op;
      switch (_p0.ctor)
      {case "Add":
         return $Graphics$Collage.group(_U.list([A2($Graphics$Collage.filled,
                                                $Color.white,
                                                A2($Graphics$Collage.rect,40,20))
                                                ,A2($Graphics$Collage.moveX,pos,plus($Color.red))
                                                ,A2($Graphics$Collage.move,
                                                {ctor: "_Tuple2",_0: 8,_1: 2},
                                                $Graphics$Collage.text(A2($Text.style,
                                                opStyle($Color.red),
                                                $Text.fromString($String.fromChar(z)))))]));
         case "Backspace":
         return $Graphics$Collage.group(_U.list([A2($Graphics$Collage.filled,
                                                $Color.white,
                                                A2($Graphics$Collage.rect,50,20))
                                                ,A2($Graphics$Collage.moveY,
                                                2,
                                                $Graphics$Collage.text(A2($Text.style,
                                                opStyle($Color.blue),
                                                $Text.fromString("UNDO"))))]));
         case "Reset":
         return $Graphics$Collage.group(_U.list([A2($Graphics$Collage.filled,
                                                $Color.white,
                                                A2($Graphics$Collage.rect,60,20))
                                                ,A2($Graphics$Collage.moveY,
                                                2,
                                                $Graphics$Collage.text(A2($Text.style,
                                                opStyle($Color.darkGreen),
                                                $Text.fromString("RESET"))))]));
         default:
         return $Graphics$Collage.group(_U.list([A2($Graphics$Collage.filled,
           $Color.darkGrey,
           A2($Graphics$Collage.rect,40,20))]));}
   });
   var nearEnough2 = F2(function (_p2,_p1) {
      var _p3 = _p2;
      var _p6 = _p3._1;
      var _p4 = _p1;
      var _p5 = _p4._1;
      return _U.cmp($Basics.abs(_p3._0 - _p4._0),
      55) < 0 && (_U.cmp(_p5 - _p6,100) < 0 && _U.cmp(_p5 - _p6,
      -100) > 0);
   });
   var nearEnough = F2(function (_p8,_p7) {
      var _p9 = _p8;
      var _p12 = _p9._1;
      var _p10 = _p7;
      var _p11 = _p10._1;
      return _U.cmp($Basics.abs(_p9._0 - _p10._0),
      55) < 0 && (_U.cmp(_p11 - _p12,38) < 0 && _U.cmp(_p11 - _p12,
      5) > 0);
   });
   var updateScore = F3(function (state,_p14,_p13) {
      var _p15 = _p14;
      var _p16 = _p13;
      var keycode = $Char.toCode(_p16._1);
      if (_U.eq(state.oldvy,0) && (A2(nearEnough,
      {ctor: "_Tuple2",_0: _p15._0._0,_1: _p15._0._1},
      {ctor: "_Tuple2"
      ,_0: state.x
      ,_1: state.y}) && _U.eq(state.operated,false))) {
            var _p17 = _p16._0;
            switch (_p17.ctor)
            {case "Add": return keycode;
               case "Backspace": return 1;
               case "Reset": return 0;
               default: return -1;}
         } else return -9999;
   });
   var speedCalc = F2(function (state,_p18) {
      var _p19 = _p18;
      return A2(nearEnough,
      {ctor: "_Tuple2",_0: _p19._0._0,_1: _p19._0._1},
      {ctor: "_Tuple2"
      ,_0: state.x
      ,_1: state.y}) && (_U.eq(state.oldvy,0) || _U.eq(state.vy,
      0)) ? _p19._1 : -999;
   });
   var landOnAPlatform = F2(function (state,_p20) {
      var _p21 = _p20;
      var _p22 = _p21._0._1;
      return A2(nearEnough,
      {ctor: "_Tuple2",_0: _p21._0._0,_1: _p22},
      {ctor: "_Tuple2",_0: state.x,_1: state.y}) ? _p22 + 15 : 0;
   });
   var touchJump = F3(function (touch,state,h$) {
      var y = $Basics.toFloat(touch.y);
      var h = $Basics.toFloat(h$);
      return _U.eq(touch.id,69) ? false : _U.cmp(0 - y + h / 2,
      state.y + 60 - h / 2) > 0 ? true : false;
   });
   var updateTime = F2(function (dt,state) {
      return _U.update(state,{t: state.t + dt});
   });
   var Keys = F2(function (a,b) {    return {x: a,y: b};});
   var LeftRight = {ctor: "LeftRight"};
   var getDirection = F2(function (state,_p23) {
      var _p24 = _p23;
      return A2(nearEnough,
      {ctor: "_Tuple2",_0: _p24._0._0,_1: _p24._0._1},
      {ctor: "_Tuple2",_0: state.x,_1: state.y}) ? _U.eq(_p24._2,
      LeftRight) ? 2 : 1 : -999;
   });
   var gravity = F2(function (dt,state) {
      var platforms = state.platforms;
      var groundHeight = $List.maximum(A2($List.map,
      landOnAPlatform(state),
      platforms));
      var platformSpeed = $List.maximum(A2($List.map,
      speedCalc(state),
      platforms));
      var dir = $List.maximum(A2($List.map,
      getDirection(state),
      platforms));
      var change = A2($Maybe.withDefault,
      0,
      $List.maximum(A3($List.map2,
      updateScore(state),
      platforms,
      state.operations)));
      return _U.eq(change,-9999) ? _U.update(state,
      {vy: _U.cmp(state.y,state.groundHeight) > 0 || _U.cmp(state.vy,
      0) > 0 ? state.vy - dt / 4 : 0
      ,oldvy: state.vy
      ,dir: A2($Maybe.withDefault,0,dir)
      ,platformSpeed: _U.eq(platformSpeed,
      $Maybe.Just(-999)) ? 0 : A2($Maybe.withDefault,0,platformSpeed)
      ,operated: _U.eq(state.operated,true) && _U.cmp(state.vy,
      0) < 0 ? false : state.operated
      ,groundHeight: A2($Maybe.withDefault,
      0,
      groundHeight)}) : _U.update(state,
      {vy: _U.cmp(state.y,state.groundHeight) > 0 || _U.cmp(state.vy,
      0) > 0 ? state.vy - dt / 4 : 0
      ,oldvy: state.vy
      ,dir: A2($Maybe.withDefault,0,dir)
      ,platformSpeed: _U.eq(platformSpeed,
      $Maybe.Just(-999)) ? 0 : A2($Maybe.withDefault,0,platformSpeed)
      ,operated: true
      ,groundHeight: A2($Maybe.withDefault,0,groundHeight)
      ,score: _U.eq(change,0) ? "" : _U.eq(change,
      1) ? A2($String.dropRight,1,state.score) : _U.eq(change,
      -1) ? state.score : A2($Basics._op["++"],
      state.score,
      $String.fromChar($Char.fromCode(change)))});
   });
   var UpDown = {ctor: "UpDown"};
   var Null = {ctor: "Null"};
   var Reset = {ctor: "Reset"};
   var Backspace = {ctor: "Backspace"};
   var Add = {ctor: "Add"};
   var Model = function (a) {
      return function (b) {
         return function (c) {
            return function (d) {
               return function (e) {
                  return function (f) {
                     return function (g) {
                        return function (h) {
                           return function (i) {
                              return function (j) {
                                 return function (k) {
                                    return function (l) {
                                       return function (m) {
                                          return function (n) {
                                             return function (o) {
                                                return function (p) {
                                                   return function (q) {
                                                      return function (r) {
                                                         return function (s) {
                                                            return function (t) {
                                                               return {x: a
                                                                      ,y: b
                                                                      ,t: c
                                                                      ,groundHeight: d
                                                                      ,vx: e
                                                                      ,vy: f
                                                                      ,dir: g
                                                                      ,platformSpeed: h
                                                                      ,platformDir: i
                                                                      ,oldvy: j
                                                                      ,platforms: k
                                                                      ,score: l
                                                                      ,operations: m
                                                                      ,operated: n
                                                                      ,target: o
                                                                      ,win: p
                                                                      ,lose: q
                                                                      ,winPos: r
                                                                      ,winTime: s
                                                                      ,losePos: t};
                                                            };
                                                         };
                                                      };
                                                   };
                                                };
                                             };
                                          };
                                       };
                                    };
                                 };
                              };
                           };
                        };
                     };
                  };
               };
            };
         };
      };
   };
   var width = 425;
   var platformPhysics = F3(function (dt,h,_p25) {
      var _p26 = _p25;
      var _p30 = _p26._0._1;
      var _p29 = _p26._0._0;
      var _p28 = _p26._1;
      var _p27 = _p26._2;
      var height = $Basics.toFloat(h);
      return _U.eq(_p27,LeftRight) ? _U.cmp(_p29,
      width) > 0 ? {ctor: "_Tuple3"
                   ,_0: {ctor: "_Tuple2",_0: 0 - width,_1: _p30}
                   ,_1: _p28
                   ,_2: _p27} : _U.cmp(_p29,0 - width) < 0 ? {ctor: "_Tuple3"
                                                             ,_0: {ctor: "_Tuple2",_0: width,_1: _p30}
                                                             ,_1: _p28
                                                             ,_2: _p27} : {ctor: "_Tuple3"
                                                                          ,_0: {ctor: "_Tuple2",_0: _p29 + _p28 * dt,_1: _p30}
                                                                          ,_1: _p28
                                                                          ,_2: _p27} : _U.cmp(_p30,height) > 0 ? {ctor: "_Tuple3"
                                                                                                                 ,_0: {ctor: "_Tuple2",_0: _p29,_1: -30}
                                                                                                                 ,_1: _p28
                                                                                                                 ,_2: _p27} : _U.cmp(_p30,
      -30) < 0 ? {ctor: "_Tuple3"
                 ,_0: {ctor: "_Tuple2",_0: _p29,_1: height}
                 ,_1: _p28
                 ,_2: _p27} : {ctor: "_Tuple3"
                              ,_0: {ctor: "_Tuple2",_0: _p29,_1: _p30 + _p28 * dt}
                              ,_1: _p28
                              ,_2: _p27};
   });
   var physics = F3(function (dt,h,state) {
      return _U.update(state,
      {x: _U.cmp(state.x,
      0 - (width - 50)) < 0 ? width - 50 : _U.cmp(state.x,
      width - 50) > 0 ? 0 - (width - 50) : _U.eq(state.dir,
      2) ? state.x + dt * (state.vx + state.platformSpeed) : state.x + dt * state.vx
      ,y: _U.eq(state.dir,1) ? _U.cmp(state.platformSpeed,
      0) < 0 ? A2($Basics.min,
      state.groundHeight,
      state.y + dt * state.vy) : A2($Basics.max,
      state.groundHeight,
      state.y + dt * state.vy) : A2($Basics.max,
      state.groundHeight,
      state.y + dt * state.vy)
      ,platforms: A2($List.map,
      A2(platformPhysics,dt,h),
      state.platforms)});
   });
   var jumpPower = 6;
   var jump = F4(function (keys,touches,h,state) {
      var touch = A2($Maybe.withDefault,
      {x: 0,y: 0,id: 69,x0: 0,y0: 0,t0: 0},
      $List.head(touches));
      return (_U.cmp(keys.y,0) > 0 || A3(touchJump,
      touch,
      state,
      h)) && _U.eq(state.vy,0) ? _U.update(state,
      {vy: jumpPower,oldvy: state.vy}) : state;
   });
   var horizontalVelocity = 4;
   var touchMove = F3(function (touch,state,w$) {
      var x = $Basics.toFloat(touch.x);
      var w = $Basics.toFloat(w$);
      return _U.eq(touch.id,69) ? 0 : _U.cmp(x - w / 2,
      state.x + horizontalVelocity) > 0 ? 1 : _U.cmp(x - w / 2,
      state.x - horizontalVelocity) < 0 ? -1 : 0;
   });
   var walk = F4(function (keys,touches,w,state) {
      var touch = A2($Maybe.withDefault,
      {x: 0,y: 0,id: 69,x0: 0,y0: 0,t0: 0},
      $List.head(touches));
      return _U.update(state,
      {vx: ($Basics.toFloat(keys.x) + A3(touchMove,
      touch,
      state,
      w)) * horizontalVelocity});
   });
   var operations = _U.list([{ctor: "_Tuple2"
                             ,_0: Add
                             ,_1: _U.chr("A")}
                            ,{ctor: "_Tuple2",_0: Add,_1: _U.chr("O")}
                            ,{ctor: "_Tuple2",_0: Add,_1: _U.chr("T")}
                            ,{ctor: "_Tuple2",_0: Backspace,_1: _U.chr("D")}
                            ,{ctor: "_Tuple2",_0: Backspace,_1: _U.chr("D")}
                            ,{ctor: "_Tuple2",_0: Add,_1: _U.chr("I")}
                            ,{ctor: "_Tuple2",_0: Add,_1: _U.chr("N")}
                            ,{ctor: "_Tuple2",_0: Add,_1: _U.chr("R")}]);
   var platforms = _U.list([{ctor: "_Tuple3"
                            ,_0: {ctor: "_Tuple2",_0: 290,_1: 60}
                            ,_1: 1
                            ,_2: LeftRight}
                           ,{ctor: "_Tuple3"
                            ,_0: {ctor: "_Tuple2",_0: 0,_1: 60}
                            ,_1: 1
                            ,_2: LeftRight}
                           ,{ctor: "_Tuple3"
                            ,_0: {ctor: "_Tuple2",_0: -290,_1: 60}
                            ,_1: 1
                            ,_2: LeftRight}
                           ,{ctor: "_Tuple3"
                            ,_0: {ctor: "_Tuple2",_0: -200,_1: 120}
                            ,_1: 0
                            ,_2: LeftRight}
                           ,{ctor: "_Tuple3"
                            ,_0: {ctor: "_Tuple2",_0: 200,_1: 120}
                            ,_1: 0
                            ,_2: LeftRight}
                           ,{ctor: "_Tuple3"
                            ,_0: {ctor: "_Tuple2",_0: 290,_1: 180}
                            ,_1: -1
                            ,_2: LeftRight}
                           ,{ctor: "_Tuple3"
                            ,_0: {ctor: "_Tuple2",_0: 0,_1: 180}
                            ,_1: -1
                            ,_2: LeftRight}
                           ,{ctor: "_Tuple3"
                            ,_0: {ctor: "_Tuple2",_0: -290,_1: 180}
                            ,_1: -1
                            ,_2: LeftRight}]);
   var bannerPosition = 0;
   var platformDesign = $Graphics$Collage.group(_U.list([A2($Graphics$Collage.filled,
   $Color.black,
   A2($Graphics$Collage.rect,100,10))]));
   var platform = F3(function (groundY,_p32,_p31) {
      var _p33 = _p32;
      var _p34 = _p31;
      return A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: _p33._0._0,_1: _p33._0._1 + groundY},
      $Graphics$Collage.group(_U.list([platformDesign
                                      ,A2($Graphics$Collage.moveY,
                                      -5,
                                      A2(operator,_p34._0,_p34._1))])));
   });
   var getPoint = F2(function (size,n) {
      return {ctor: "_Tuple2"
             ,_0: size * $Basics.cos(n)
             ,_1: size * $Basics.sin(n)};
   });
   var gear = function (size) {
      return $Graphics$Collage.polygon(A2($List.map,
      getPoint(size),
      _U.range(0,18)));
   };
   var winBanner = F2(function (winPos,t) {
      return $Graphics$Collage.group(_U.list([A2($Graphics$Collage.rotate,
                                             $Basics.degrees(0 - t),
                                             A2($Graphics$Collage.move,
                                             {ctor: "_Tuple2",_0: 220,_1: -10},
                                             A2($Graphics$Collage.filled,$Color.white,gear(30))))
                                             ,A2($Graphics$Collage.move,
                                             {ctor: "_Tuple2",_0: 220,_1: -10},
                                             A2($Graphics$Collage.filled,
                                             $Color.yellow,
                                             $Graphics$Collage.circle(15)))
                                             ,A2($Graphics$Collage.rotate,
                                             $Basics.degrees(t),
                                             A2($Graphics$Collage.move,
                                             {ctor: "_Tuple2",_0: -220,_1: -10},
                                             A2($Graphics$Collage.filled,$Color.white,gear(30))))
                                             ,A2($Graphics$Collage.move,
                                             {ctor: "_Tuple2",_0: -220,_1: -10},
                                             A2($Graphics$Collage.filled,
                                             $Color.yellow,
                                             $Graphics$Collage.circle(15)))
                                             ,$Graphics$Collage.text(A2($Text.style,
                                             victoryStyle($Color.yellow),
                                             $Text.fromString("GOLD STAR")))]));
   });
   var loseBanner = F2(function (losePos,t) {
      return $Graphics$Collage.group(_U.list([A2($Graphics$Collage.rotate,
                                             $Basics.degrees(0 - t),
                                             A2($Graphics$Collage.move,
                                             {ctor: "_Tuple2",_0: 200,_1: -10},
                                             A2($Graphics$Collage.filled,$Color.black,gear(30))))
                                             ,A2($Graphics$Collage.move,
                                             {ctor: "_Tuple2",_0: 200,_1: -10},
                                             A2($Graphics$Collage.filled,
                                             A3($Color.rgb,100,100,100),
                                             $Graphics$Collage.circle(15)))
                                             ,A2($Graphics$Collage.rotate,
                                             $Basics.degrees(t),
                                             A2($Graphics$Collage.move,
                                             {ctor: "_Tuple2",_0: -200,_1: -10},
                                             A2($Graphics$Collage.filled,$Color.black,gear(30))))
                                             ,A2($Graphics$Collage.move,
                                             {ctor: "_Tuple2",_0: -200,_1: -10},
                                             A2($Graphics$Collage.filled,
                                             A3($Color.rgb,100,100,100),
                                             $Graphics$Collage.circle(15)))
                                             ,$Graphics$Collage.text(A2($Text.style,
                                             victoryStyle($Color.white),
                                             $Text.fromString("TRY AGAIN")))]));
   });
   var character = $Graphics$Collage.group(_U.list([A2($Graphics$Collage.filled,
   $Color.red,
   $Graphics$Collage.circle(10))]));
   var startingTime = 35;
   var winning = F2(function (dt,state) {
      return state.lose ? _U.update(state,
      {win: false}) : _U.eq(state.win,false) && _U.eq(state.score,
      state.target) ? _U.update(state,
      {win: true
      ,winPos: state.winPos - dt
      ,winTime: startingTime - state.t / 50}) : _U.eq(state.win,
      true) && _U.cmp(state.winPos,
      -119 + bannerPosition) > 0 ? _U.update(state,
      {winPos: state.winPos - dt}) : state;
   });
   var losing = F2(function (dt,state) {
      return state.win ? _U.update(state,
      {lose: false}) : _U.eq(state.lose,false) && _U.cmp(state.t,
      50 * startingTime) > 0 ? _U.update(state,
      {lose: true,losePos: state.losePos - dt}) : _U.eq(state.lose,
      true) && _U.cmp(state.losePos,
      -119 + bannerPosition) > 0 ? _U.update(state,
      {losePos: state.losePos - dt}) : state;
   });
   var update = F2(function (_p35,state) {
      var _p36 = _p35;
      var _p40 = _p36._2;
      var _p39 = _p36._1;
      var _p38 = _p36._3._1;
      var _p37 = _p36._0;
      return A2(losing,
      _p37,
      A2(winning,
      _p37,
      A3(physics,
      _p37,
      _p38,
      A4(walk,
      _p39,
      _p40,
      _p36._3._0,
      A4(jump,
      _p39,
      _p40,
      _p38,
      A2(updateTime,_p37,A2(gravity,_p37,state)))))));
   });
   var timerText = F5(function (t,color,size,win,winTime) {
      return $Graphics$Collage.text(A2($Text.style,
      A2(timerStyle,color,size),
      $Text.fromString(A2($Basics._op["++"],
      "Time: ",
      $Basics.toString(win ? $Basics.ceiling(winTime) : _U.cmp($Basics.ceiling(startingTime - t / 50),
      0) < 0 ? 0 : $Basics.ceiling(startingTime - t / 50))))));
   });
   var backdrop = F5(function (w,h,t,win,winTime) {
      return $Graphics$Collage.group(_U.list([A2($Graphics$Collage.filled,
                                             A3($Color.rgb,100,100,100),
                                             A2($Graphics$Collage.rect,w,h))
                                             ,A2($Graphics$Collage.rotate,
                                             $Basics.degrees(t),
                                             A2($Graphics$Collage.filled,$Color.darkGray,gear(100)))
                                             ,A2($Graphics$Collage.move,
                                             {ctor: "_Tuple2"
                                             ,_0: -140 * $Basics.cos((0 - t) / 100)
                                             ,_1: -140 * $Basics.sin((0 - t) / 100)},
                                             $Graphics$Collage.group(_U.list([A2($Graphics$Collage.rotate,
                                                                             $Basics.degrees(0 - t),
                                                                             A2($Graphics$Collage.filled,$Color.darkGray,gear(40)))
                                                                             ,A2($Graphics$Collage.filled,
                                                                             A3($Color.rgb,100,100,100),
                                                                             $Graphics$Collage.circle(20))
                                                                             ,A2($Graphics$Collage.rotate,
                                                                             $Basics.degrees(t / 2),
                                                                             A2($Graphics$Collage.filled,
                                                                             $Color.darkGray,
                                                                             A2($Graphics$Collage.rect,10,30)))])))
                                             ,A2($Graphics$Collage.move,
                                             {ctor: "_Tuple2"
                                             ,_0: 140 * $Basics.cos((0 - t) / 100)
                                             ,_1: 140 * $Basics.sin((0 - t) / 100)},
                                             $Graphics$Collage.group(_U.list([A2($Graphics$Collage.rotate,
                                                                             $Basics.degrees(0 - t),
                                                                             A2($Graphics$Collage.filled,$Color.darkGray,gear(40)))
                                                                             ,A2($Graphics$Collage.filled,
                                                                             A3($Color.rgb,100,100,100),
                                                                             $Graphics$Collage.circle(20))
                                                                             ,A2($Graphics$Collage.rotate,
                                                                             $Basics.degrees(t / 2),
                                                                             A2($Graphics$Collage.filled,
                                                                             $Color.darkGray,
                                                                             A2($Graphics$Collage.rect,10,30)))])))
                                             ,A2($Graphics$Collage.filled,
                                             A3($Color.rgb,100,100,100),
                                             $Graphics$Collage.circle(50))
                                             ,A2($Graphics$Collage.rotate,
                                             $Basics.degrees((0 - t) / 2),
                                             A2($Graphics$Collage.scale,5,plus($Color.darkGray)))
                                             ,A2($Graphics$Collage.move,
                                             {ctor: "_Tuple2",_0: -300,_1: 320},
                                             A5(timerText,t,$Color.white,30,win,winTime))]));
   });
   var speedofGame = 20;
   var input = function () {
      var delta = A2($Signal.map,
      function (t) {
         return t / speedofGame;
      },
      $Time.fps(30));
      return A2($Signal.sampleOn,
      delta,
      A5($Signal.map4,
      quadTuple,
      delta,
      $Keyboard.arrows,
      $Touch.touches,
      $Window.dimensions));
   }();
   var frameColor = $Color.black;
   var answer = "ONTARIO";
   var enableTarget = false;
   var instruction = "Which province is Toronto located in? ";
   var view = F2(function (_p41,state) {
      var _p42 = _p41;
      var _p45 = _p42._0;
      var _p44 = _p42._1;
      var _p43 = {ctor: "_Tuple2"
                 ,_0: $Basics.toFloat(_p45)
                 ,_1: $Basics.toFloat(_p44)};
      var w = _p43._0;
      var h = _p43._1;
      var groundY = 60 - h / 2;
      var position = {ctor: "_Tuple2"
                     ,_0: state.x
                     ,_1: state.y + groundY};
      return A3($Graphics$Collage.collage,
      _p45,
      _p44,
      A2($Basics._op["++"],
      _U.list([A5(backdrop,w,h,state.t,state.win,state.winTime)
              ,A2($Graphics$Collage.move,position,character)]),
      A2($Basics._op["++"],
      A3($List.map2,
      platform(groundY),
      state.platforms,
      state.operations),
      _U.list([A2($Graphics$Collage.move,
              {ctor: "_Tuple2",_0: 0,_1: 24 - h / 2},
              A2($Graphics$Collage.filled,
              frameColor,
              A2($Graphics$Collage.rect,w,50)))
              ,A2($Graphics$Collage.moveX,
              (0 - w) / 2 - width + 50,
              A2($Graphics$Collage.filled,
              frameColor,
              A2($Graphics$Collage.rect,w,h)))
              ,A2($Graphics$Collage.moveX,
              w / 2 + width - 50,
              A2($Graphics$Collage.filled,
              frameColor,
              A2($Graphics$Collage.rect,w,h)))
              ,A2($Graphics$Collage.move,
              {ctor: "_Tuple2",_0: 0,_1: 28 - h / 2},
              $Graphics$Collage.text($Text.concat(_U.list([A2($Text.style,
                                                          scoreStyle($Color.white),
                                                          $Text.fromString(instruction))
                                                          ,A2($Text.style,
                                                          scoreStyle($Color.yellow),
                                                          $Text.fromString(state.win ? state.target : state.score))
                                                          ,A2($Text.style,
                                                          scoreStyle($Color.white),
                                                          $Text.fromString(enableTarget ? A2($Basics._op["++"],
                                                          " ",
                                                          state.target) : ""))]))))
              ,A2($Graphics$Collage.move,
              {ctor: "_Tuple2",_0: 0,_1: 60 + h / 2 + state.winPos},
              A2(winBanner,state.winPos,state.t))
              ,A2($Graphics$Collage.move,
              {ctor: "_Tuple2",_0: 0,_1: 60 + h / 2 + state.losePos},
              A2(loseBanner,state.losePos,state.t))]))));
   });
   var startScore = "";
   var initialState = {x: 0
                      ,y: 0
                      ,t: 0
                      ,groundHeight: 0
                      ,vx: 0
                      ,vy: 0
                      ,dir: 0
                      ,platformSpeed: 0
                      ,platformDir: UpDown
                      ,oldvy: 0
                      ,platforms: platforms
                      ,score: startScore
                      ,operations: operations
                      ,operated: true
                      ,target: answer
                      ,win: false
                      ,lose: false
                      ,winPos: 0
                      ,winTime: startingTime
                      ,losePos: 0};
   var state = initialState;
   var main = A3($Signal.map2,
   view,
   $Window.dimensions,
   A3($Signal.foldp,update,state,input));
   return _elm.Main.values = {_op: _op
                             ,startScore: startScore
                             ,instruction: instruction
                             ,enableTarget: enableTarget
                             ,answer: answer
                             ,frameColor: frameColor
                             ,speedofGame: speedofGame
                             ,startingTime: startingTime
                             ,character: character
                             ,backdrop: backdrop
                             ,gear: gear
                             ,getPoint: getPoint
                             ,winBanner: winBanner
                             ,loseBanner: loseBanner
                             ,platformDesign: platformDesign
                             ,bannerPosition: bannerPosition
                             ,platforms: platforms
                             ,operations: operations
                             ,horizontalVelocity: horizontalVelocity
                             ,jumpPower: jumpPower
                             ,width: width
                             ,Model: Model
                             ,Add: Add
                             ,Backspace: Backspace
                             ,Reset: Reset
                             ,Null: Null
                             ,UpDown: UpDown
                             ,LeftRight: LeftRight
                             ,Keys: Keys
                             ,state: state
                             ,initialState: initialState
                             ,update: update
                             ,updateTime: updateTime
                             ,winning: winning
                             ,losing: losing
                             ,jump: jump
                             ,touchJump: touchJump
                             ,gravity: gravity
                             ,landOnAPlatform: landOnAPlatform
                             ,speedCalc: speedCalc
                             ,getDirection: getDirection
                             ,updateScore: updateScore
                             ,nearEnough: nearEnough
                             ,nearEnough2: nearEnough2
                             ,physics: physics
                             ,platformPhysics: platformPhysics
                             ,walk: walk
                             ,touchMove: touchMove
                             ,view: view
                             ,platform: platform
                             ,operator: operator
                             ,opStyle: opStyle
                             ,victoryStyle: victoryStyle
                             ,scoreStyle: scoreStyle
                             ,heart: heart
                             ,plus: plus
                             ,timerText: timerText
                             ,timerStyle: timerStyle
                             ,main: main
                             ,input: input
                             ,quadTuple: quadTuple};
};