var _user$project$Main$pacman = function (t) {
	return _user$project$Graphicsvg$group(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_user$project$Graphicsvg$rotate,
				_elm_lang$core$Basics$degrees(
					135 - (_elm_lang$core$Basics$abs(
						_elm_lang$core$Basics$cos(t / 100)) * 45)),
				A2(
					_user$project$Graphicsvg$filled,
					_user$project$Graphicsvg$yellow,
					A2(_user$project$Graphicsvg$wedge, 100, 0.5))),
				A2(
				_user$project$Graphicsvg$rotate,
				_elm_lang$core$Basics$degrees(
					-135 + (_elm_lang$core$Basics$abs(
						_elm_lang$core$Basics$cos(t / 100)) * 45)),
				A2(
					_user$project$Graphicsvg$filled,
					_user$project$Graphicsvg$yellow,
					A2(_user$project$Graphicsvg$wedge, 100, 0.5)))
			]));
};
var _user$project$Main$view = function (t) {
	return A3(
		_user$project$Graphicsvg$collage,
		500,
		500,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Main$pacman(t)
			]));
};
var _user$project$Main$update = F2(
	function (action, model) {
		var _p0 = action;
		return {ctor: '_Tuple2', _0: model + 1, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _user$project$Main$init = {ctor: '_Tuple2', _0: 0, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return A2(_elm_lang$core$Time$every, _elm_lang$core$Time$millisecond, _user$project$Main$Tick);
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})
};
