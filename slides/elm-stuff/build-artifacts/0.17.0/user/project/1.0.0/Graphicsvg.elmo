var _user$project$Graphicsvg$toHexHelper = function (dec) {
	var _p0 = dec;
	switch (_p0) {
		case 0:
			return '0';
		case 1:
			return '1';
		case 2:
			return '2';
		case 3:
			return '3';
		case 4:
			return '4';
		case 5:
			return '5';
		case 6:
			return '6';
		case 7:
			return '7';
		case 8:
			return '8';
		case 9:
			return '9';
		case 10:
			return 'A';
		case 11:
			return 'B';
		case 12:
			return 'C';
		case 13:
			return 'D';
		case 14:
			return 'E';
		case 15:
			return 'F';
		default:
			return '';
	}
};
var _user$project$Graphicsvg$toHex = function (dec) {
	var second = A2(_elm_lang$core$Basics_ops['%'], dec, 16);
	var first = (dec / 16) | 0;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Graphicsvg$toHexHelper(first),
		_user$project$Graphicsvg$toHexHelper(second));
};
var _user$project$Graphicsvg$mkRGB = function (_p1) {
	var _p2 = _p1;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'#',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_user$project$Graphicsvg$toHex(
				_elm_lang$core$Basics$round(_p2._0)),
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Graphicsvg$toHex(
					_elm_lang$core$Basics$round(_p2._1)),
				_user$project$Graphicsvg$toHex(
					_elm_lang$core$Basics$round(_p2._2)))));
};
var _user$project$Graphicsvg$mkAlpha = function (_p3) {
	var _p4 = _p3;
	return _elm_lang$core$Basics$toString(_p4._3);
};
var _user$project$Graphicsvg$pairToString = function (_p5) {
	var _p6 = _p5;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(_p6._0),
		A2(
			_elm_lang$core$Basics_ops['++'],
			',',
			_elm_lang$core$Basics$toString(_p6._1)));
};
var _user$project$Graphicsvg$bezierStringHelper = function (_p7) {
	var _p8 = _p7;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		' Q ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_user$project$Graphicsvg$pairToString(
				{ctor: '_Tuple2', _0: _p8._0._0, _1: _p8._0._1}),
			A2(
				_elm_lang$core$Basics_ops['++'],
				' ',
				_user$project$Graphicsvg$pairToString(
					{ctor: '_Tuple2', _0: _p8._1._0, _1: _p8._1._1}))));
};
var _user$project$Graphicsvg$createBezierString = F2(
	function (first, list) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'M ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Graphicsvg$pairToString(first),
				_elm_lang$core$String$concat(
					A2(_elm_lang$core$List$map, _user$project$Graphicsvg$bezierStringHelper, list))));
	});
var _user$project$Graphicsvg$degrees = function (deg) {
	return deg * (_elm_lang$core$Basics$pi / 180);
};
var _user$project$Graphicsvg$makePair = function (n) {
	return {ctor: '_Tuple2', _0: n, _1: n};
};
var _user$project$Graphicsvg$flippedComparison = F2(
	function (_p10, _p9) {
		var _p11 = _p10;
		var _p12 = _p9;
		var _p13 = A2(_elm_lang$core$Basics$compare, _p11._0, _p12._0);
		switch (_p13.ctor) {
			case 'LT':
				return _elm_lang$core$Basics$GT;
			case 'EQ':
				return _elm_lang$core$Basics$EQ;
			default:
				return _elm_lang$core$Basics$LT;
		}
	});
var _user$project$Graphicsvg$f = 500;
var _user$project$Graphicsvg$scaleT = F2(
	function (_p15, _p14) {
		var _p16 = _p15;
		var _p17 = _p14;
		return {
			ctor: '_Tuple2',
			_0: _p16._0,
			_1: {
				ctor: '_Tuple3',
				_0: {ctor: '_Tuple2', _0: _p16._1._0._0 * _p17._0, _1: _p16._1._0._1 * _p17._1},
				_1: _p16._1._1,
				_2: {ctor: '_Tuple2', _0: _p16._1._2._0, _1: _p16._1._2._1}
			}
		};
	});
var _user$project$Graphicsvg$rotT = F2(
	function (_p18, rad) {
		var _p19 = _p18;
		return {
			ctor: '_Tuple2',
			_0: _p19._0,
			_1: {ctor: '_Tuple3', _0: _p19._1._0, _1: _p19._1._1 + rad, _2: _p19._1._2}
		};
	});
var _user$project$Graphicsvg$moveT = F2(
	function (_p21, _p20) {
		var _p22 = _p21;
		var _p23 = _p20;
		return {
			ctor: '_Tuple2',
			_0: _p22._0,
			_1: {
				ctor: '_Tuple3',
				_0: _p22._1._0,
				_1: _p22._1._1,
				_2: {ctor: '_Tuple2', _0: _p22._1._2._0 + _p23._0, _1: _p22._1._2._1 + _p23._1}
			}
		};
	});
var _user$project$Graphicsvg$id = {
	ctor: '_Tuple2',
	_0: {
		ctor: '_Tuple3',
		_0: {ctor: '_Tuple2', _0: 1, _1: 0},
		_1: {ctor: '_Tuple2', _0: 0, _1: 1},
		_2: {ctor: '_Tuple2', _0: 0, _1: 0}
	},
	_1: {
		ctor: '_Tuple3',
		_0: {ctor: '_Tuple2', _0: 1, _1: 1},
		_1: 0,
		_2: {ctor: '_Tuple2', _0: 0, _1: 0}
	}
};
var _user$project$Graphicsvg$coalesce = function (_p24) {
	var _p25 = _p24;
	var _p34 = _p25._1._0._1;
	var _p33 = _p25._1._0._0;
	var _p32 = _p25._1._2._1;
	var _p31 = _p25._1._2._0;
	var _p30 = _p25._1._1;
	var _p29 = _p25._0._1._1;
	var _p28 = _p25._0._1._0;
	var _p27 = _p25._0._0._1;
	var _p26 = _p25._0._0._0;
	var ry = _elm_lang$core$Basics$sin(_p30);
	var rx = _elm_lang$core$Basics$cos(_p30);
	var sd = _p34 * _p29;
	var sc = _p33 * _p28;
	var sb = _p34 * _p27;
	var sa = _p33 * _p26;
	return {
		ctor: '_Tuple2',
		_0: {
			ctor: '_Tuple3',
			_0: {ctor: '_Tuple2', _0: (rx * sa) - (ry * sb), _1: (ry * sa) + (rx * sb)},
			_1: {ctor: '_Tuple2', _0: (rx * sc) - (ry * sd), _1: (ry * sc) + (rx * sd)},
			_2: {ctor: '_Tuple2', _0: (_p25._0._2._0 + (_p26 * _p31)) + (_p28 * _p32), _1: (_p25._0._2._1 + (_p27 * _p31)) + (_p29 * _p32)}
		},
		_1: {
			ctor: '_Tuple3',
			_0: {ctor: '_Tuple2', _0: 1, _1: 1},
			_1: 0,
			_2: {ctor: '_Tuple2', _0: 0, _1: 0}
		}
	};
};
var _user$project$Graphicsvg$createSVG = F2(
	function (trans, shape) {
		createSVG:
		while (true) {
			var _p35 = shape;
			switch (_p35.ctor) {
				case 'Inked':
					var _p47 = _p35._0;
					var strokeAttrs = function () {
						var _p36 = _p35._1;
						if (_p36.ctor === 'Nothing') {
							return _elm_lang$core$Native_List.fromArray(
								[]);
						} else {
							if (_p36._0._0.ctor === 'Solid') {
								var _p37 = _p36._0._1;
								return _elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$svg$Svg_Attributes$strokeWidth(
										_elm_lang$core$Basics$toString(_p36._0._0._0)),
										_elm_lang$svg$Svg_Attributes$stroke(
										_user$project$Graphicsvg$mkRGB(_p37)),
										_elm_lang$svg$Svg_Attributes$strokeOpacity(
										_user$project$Graphicsvg$mkAlpha(_p37))
									]);
							} else {
								var _p38 = _p36._0._1;
								return A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$svg$Svg_Attributes$strokeWidth(
											_elm_lang$core$Basics$toString(_p36._0._0._1)),
											_elm_lang$svg$Svg_Attributes$stroke(
											_user$project$Graphicsvg$mkRGB(_p38)),
											_elm_lang$svg$Svg_Attributes$strokeOpacity(
											_user$project$Graphicsvg$mkAlpha(_p38))
										]),
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$svg$Svg_Attributes$strokeDasharray(
											_elm_lang$core$String$concat(
												A2(
													_elm_lang$core$List$intersperse,
													',',
													A2(_elm_lang$core$List$map, _user$project$Graphicsvg$pairToString, _p36._0._0._0))))
										]));
							}
						}
					}();
					var clrAttrs = _elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$svg$Svg_Attributes$fill(
							_user$project$Graphicsvg$mkRGB(_p47)),
							_elm_lang$svg$Svg_Attributes$fillOpacity(
							_user$project$Graphicsvg$mkAlpha(_p47))
						]);
					var _p39 = _user$project$Graphicsvg$coalesce(trans);
					var a = _p39._0._0._0;
					var b = _p39._0._0._1;
					var c = _p39._0._1._0;
					var d = _p39._0._1._1;
					var tx = _p39._0._2._0;
					var ty = _p39._0._2._1;
					var transAttrs = _elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$svg$Svg_Attributes$transform(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'matrix(',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$String$concat(
										A2(
											_elm_lang$core$List$intersperse,
											',',
											A2(
												_elm_lang$core$List$map,
												_elm_lang$core$Basics$toString,
												_elm_lang$core$Native_List.fromArray(
													[a, 0 - b, c, 0 - d, tx, 0 - ty])))),
									')')))
						]);
					var attrs = A2(
						_elm_lang$core$Basics_ops['++'],
						transAttrs,
						A2(_elm_lang$core$Basics_ops['++'], clrAttrs, strokeAttrs));
					var _p40 = _p35._2;
					switch (_p40.ctor) {
						case 'Circle':
							return A2(
								_elm_lang$svg$Svg$circle,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$svg$Svg_Attributes$cx('0'),
											_elm_lang$svg$Svg_Attributes$cy('0'),
											_elm_lang$svg$Svg_Attributes$r(
											_elm_lang$core$Basics$toString(_p40._0))
										]),
									attrs),
								_elm_lang$core$Native_List.fromArray(
									[]));
						case 'Rect':
							var _p42 = _p40._0;
							var _p41 = _p40._1;
							return A2(
								_elm_lang$svg$Svg$rect,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$svg$Svg_Attributes$x(
											_elm_lang$core$Basics$toString((0 - _p42) / 2)),
											_elm_lang$svg$Svg_Attributes$y(
											_elm_lang$core$Basics$toString((0 - _p41) / 2)),
											_elm_lang$svg$Svg_Attributes$width(
											_elm_lang$core$Basics$toString(_p42)),
											_elm_lang$svg$Svg_Attributes$height(
											_elm_lang$core$Basics$toString(_p41))
										]),
									attrs),
								_elm_lang$core$Native_List.fromArray(
									[]));
						case 'RoundRect':
							var _p45 = _p40._0;
							var _p44 = _p40._2;
							var _p43 = _p40._1;
							return A2(
								_elm_lang$svg$Svg$rect,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$svg$Svg_Attributes$x(
											_elm_lang$core$Basics$toString((0 - _p45) / 2)),
											_elm_lang$svg$Svg_Attributes$y(
											_elm_lang$core$Basics$toString((0 - _p43) / 2)),
											_elm_lang$svg$Svg_Attributes$rx(
											_elm_lang$core$Basics$toString(_p44)),
											_elm_lang$svg$Svg_Attributes$ry(
											_elm_lang$core$Basics$toString(_p44)),
											_elm_lang$svg$Svg_Attributes$width(
											_elm_lang$core$Basics$toString(_p45)),
											_elm_lang$svg$Svg_Attributes$height(
											_elm_lang$core$Basics$toString(_p43))
										]),
									attrs),
								_elm_lang$core$Native_List.fromArray(
									[]));
						case 'Oval':
							return A2(
								_elm_lang$svg$Svg$ellipse,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$svg$Svg_Attributes$cx('0'),
											_elm_lang$svg$Svg_Attributes$cy('0'),
											_elm_lang$svg$Svg_Attributes$rx(
											_elm_lang$core$Basics$toString(0.5 * _p40._0)),
											_elm_lang$svg$Svg_Attributes$ry(
											_elm_lang$core$Basics$toString(0.5 * _p40._1))
										]),
									attrs),
								_elm_lang$core$Native_List.fromArray(
									[]));
						case 'Polygon':
							return A2(
								_elm_lang$svg$Svg$polygon,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$svg$Svg_Attributes$points(
											_elm_lang$core$String$concat(
												A2(
													_elm_lang$core$List$intersperse,
													' ',
													A2(_elm_lang$core$List$map, _user$project$Graphicsvg$pairToString, _p40._0))))
										]),
									attrs),
								_elm_lang$core$Native_List.fromArray(
									[]));
						case 'Path':
							return A2(
								_elm_lang$svg$Svg$polyline,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$svg$Svg_Attributes$points(
											_elm_lang$core$String$concat(
												A2(
													_elm_lang$core$List$intersperse,
													' ',
													A2(_elm_lang$core$List$map, _user$project$Graphicsvg$pairToString, _p40._0))))
										]),
									attrs),
								_elm_lang$core$Native_List.fromArray(
									[]));
						case 'BezierPath':
							return A2(
								_elm_lang$svg$Svg$path,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$svg$Svg_Attributes$d(
											A2(_user$project$Graphicsvg$createBezierString, _p40._0, _p40._1))
										]),
									attrs),
								_elm_lang$core$Native_List.fromArray(
									[]));
						default:
							var font = function () {
								var _p46 = _p40._0._6;
								switch (_p46.ctor) {
									case 'Sansserif':
										return 'sansserif;';
									case 'FixedWidth':
										return 'fixedwidth;';
									case 'Custom':
										return A2(_elm_lang$core$Basics_ops['++'], _p46._0, ';');
									default:
										return 'serif';
								}
							}();
							var select = _elm_lang$core$Basics$not(_p40._0._5) ? '-webkit-touch-callout: none;\n                                                                                  -webkit-user-select: none;\n                                                                                  -khtml-user-select: none;\n                                                                                  -moz-user-select: none;\n                                                                                  -ms-user-select: none;\n                                                                                  user-select: none;' : '';
							var stri = _p40._0._4 ? 'text-decoration: strikethrough;' : '';
							var un = _p40._0._3 ? 'text-decoration: underline;' : '';
							var it = _p40._0._2 ? 'font-style: italic;' : '';
							var bol = _p40._0._1 ? 'font-weight: bold;' : '';
							var sty = A2(
								_elm_lang$core$Basics_ops['++'],
								bol,
								A2(
									_elm_lang$core$Basics_ops['++'],
									it,
									A2(
										_elm_lang$core$Basics_ops['++'],
										un,
										A2(
											_elm_lang$core$Basics_ops['++'],
											stri,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'font-family: ',
												A2(_elm_lang$core$Basics_ops['++'], font, select))))));
							return A2(
								_elm_lang$svg$Svg$text$,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$svg$Svg_Attributes$x(
											_elm_lang$core$Basics$toString(0)),
											_elm_lang$svg$Svg_Attributes$y(
											_elm_lang$core$Basics$toString(0)),
											_elm_lang$svg$Svg_Attributes$style(sty),
											_elm_lang$svg$Svg_Attributes$fontSize(
											_elm_lang$core$Basics$toString(_p40._0._0))
										]),
									A2(
										_elm_lang$core$Basics_ops['++'],
										attrs,
										_elm_lang$core$Native_List.fromArray(
											[
												_elm_lang$svg$Svg_Attributes$transform(
												A2(
													_elm_lang$core$Basics_ops['++'],
													'matrix(',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_elm_lang$core$String$concat(
															A2(
																_elm_lang$core$List$intersperse,
																',',
																A2(
																	_elm_lang$core$List$map,
																	_elm_lang$core$Basics$toString,
																	_elm_lang$core$Native_List.fromArray(
																		[a, b, c, d, tx, 0 - ty])))),
														')')))
											]))),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$svg$Svg$text(_p40._1)
									]));
					}
				case 'Move':
					var _v18 = A2(_user$project$Graphicsvg$moveT, trans, _p35._0),
						_v19 = _p35._1;
					trans = _v18;
					shape = _v19;
					continue createSVG;
				case 'Rotate':
					var _v20 = A2(_user$project$Graphicsvg$rotT, trans, _p35._0),
						_v21 = _p35._1;
					trans = _v20;
					shape = _v21;
					continue createSVG;
				case 'ScaleXY':
					var _v22 = A2(
						_user$project$Graphicsvg$scaleT,
						trans,
						{ctor: '_Tuple2', _0: _p35._0, _1: _p35._1}),
						_v23 = _p35._2;
					trans = _v22;
					shape = _v23;
					continue createSVG;
				default:
					return A2(
						_elm_lang$svg$Svg$g,
						_elm_lang$core$Native_List.fromArray(
							[]),
						A2(
							_elm_lang$core$List$map,
							_user$project$Graphicsvg$createSVG(
								_user$project$Graphicsvg$coalesce(trans)),
							_p35._0));
			}
		}
	});
var _user$project$Graphicsvg$collage = F3(
	function (w, h, shapes) {
		return A2(
			_elm_lang$svg$Svg$svg,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$svg$Svg_Attributes$width('100%'),
					_elm_lang$svg$Svg_Attributes$viewBox(
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString((0 - w) / 2),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString((0 - h) / 2),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(w),
										A2(
											_elm_lang$core$Basics_ops['++'],
											' ',
											_elm_lang$core$Basics$toString(h))))))))
				]),
			A2(
				_elm_lang$core$List$map,
				_user$project$Graphicsvg$createSVG(_user$project$Graphicsvg$id),
				shapes));
	});
var _user$project$Graphicsvg$createTopLevelList = function (_p48) {
	var _p49 = _p48;
	return _elm_lang$core$Native_List.fromArray(
		[
			{ctor: '_Tuple2', _0: _p49._0._0, _1: _p49._0._1},
			{ctor: '_Tuple2', _0: _p49._1._0, _1: _p49._1._1}
		]);
};
var _user$project$Graphicsvg$curveListHelper = function (_p50) {
	var _p51 = _p50;
	return {
		ctor: '_Tuple2',
		_0: {ctor: '_Tuple2', _0: _p51._0._0, _1: _p51._0._1},
		_1: {ctor: '_Tuple2', _0: _p51._1._0, _1: _p51._1._1}
	};
};
var _user$project$Graphicsvg$ptOnCircle = F3(
	function (r, n, cn) {
		var angle = (360 * cn) / n;
		return {
			ctor: '_Tuple2',
			_0: r * _elm_lang$core$Basics$cos(
				_user$project$Graphicsvg$degrees(angle)),
			_1: r * _elm_lang$core$Basics$sin(
				_user$project$Graphicsvg$degrees(angle))
		};
	});
var _user$project$Graphicsvg$wedgeHelper = F2(
	function (r, cn) {
		var angle = cn;
		return {
			ctor: '_Tuple2',
			_0: r * _elm_lang$core$Basics$cos(
				_user$project$Graphicsvg$degrees(angle)),
			_1: r * _elm_lang$core$Basics$sin(
				_user$project$Graphicsvg$degrees(angle))
		};
	});
var _user$project$Graphicsvg$Text = F2(
	function (a, b) {
		return {ctor: 'Text', _0: a, _1: b};
	});
var _user$project$Graphicsvg$Path = function (a) {
	return {ctor: 'Path', _0: a};
};
var _user$project$Graphicsvg$line = F2(
	function (p1, p2) {
		return _user$project$Graphicsvg$Path(
			_elm_lang$core$Native_List.fromArray(
				[p1, p2]));
	});
var _user$project$Graphicsvg$openPolygon = function (ptList) {
	return _user$project$Graphicsvg$Path(ptList);
};
var _user$project$Graphicsvg$Polygon = function (a) {
	return {ctor: 'Polygon', _0: a};
};
var _user$project$Graphicsvg$polygon = function (ptList) {
	return _user$project$Graphicsvg$Polygon(ptList);
};
var _user$project$Graphicsvg$ngon = F2(
	function (n, r) {
		return _user$project$Graphicsvg$Polygon(
			A2(
				_elm_lang$core$List$map,
				A2(_user$project$Graphicsvg$ptOnCircle, r, n),
				_elm_lang$core$Native_List.range(0, n)));
	});
var _user$project$Graphicsvg$triangle = function (r) {
	return A2(_user$project$Graphicsvg$ngon, 3, r);
};
var _user$project$Graphicsvg$funnyStar = F3(
	function (r, n, frac) {
		return _user$project$Graphicsvg$Polygon(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 0, _1: 0}
					]),
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$List$map,
						function (_p52) {
							return A3(
								_user$project$Graphicsvg$ptOnCircle,
								r,
								n,
								A2(
									F2(
										function (x, y) {
											return x * y;
										}),
									(frac / 10) * 180,
									_p52));
						},
						_elm_lang$core$Native_List.range(-10, 10)),
					_elm_lang$core$Native_List.fromArray(
						[
							{ctor: '_Tuple2', _0: 0, _1: 0}
						]))));
	});
var _user$project$Graphicsvg$wedge = F2(
	function (r, frac) {
		var n = ((frac * 360) / 10) + 5;
		return _user$project$Graphicsvg$Polygon(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 0, _1: 0}
					]),
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$List$map,
						function (_p53) {
							return A2(
								_user$project$Graphicsvg$wedgeHelper,
								r,
								A2(
									F2(
										function (x, y) {
											return x * y;
										}),
									(frac / n) * 180,
									_p53));
						},
						_elm_lang$core$Native_List.range(0 - n, n)),
					_elm_lang$core$Native_List.fromArray(
						[
							{ctor: '_Tuple2', _0: 0, _1: 0}
						]))));
	});
var _user$project$Graphicsvg$BezierPath = F2(
	function (a, b) {
		return {ctor: 'BezierPath', _0: a, _1: b};
	});
var _user$project$Graphicsvg$curve = F2(
	function (_p54, list) {
		var _p55 = _p54;
		return A2(
			_user$project$Graphicsvg$BezierPath,
			{ctor: '_Tuple2', _0: _p55._0, _1: _p55._1},
			A2(_elm_lang$core$List$map, _user$project$Graphicsvg$curveListHelper, list));
	});
var _user$project$Graphicsvg$Oval = F2(
	function (a, b) {
		return {ctor: 'Oval', _0: a, _1: b};
	});
var _user$project$Graphicsvg$oval = F2(
	function (x, y) {
		return A2(_user$project$Graphicsvg$Oval, x, y);
	});
var _user$project$Graphicsvg$RoundRect = F3(
	function (a, b, c) {
		return {ctor: 'RoundRect', _0: a, _1: b, _2: c};
	});
var _user$project$Graphicsvg$roundedRect = F3(
	function (w, h, r) {
		return A3(_user$project$Graphicsvg$RoundRect, w, h, r);
	});
var _user$project$Graphicsvg$Rect = F2(
	function (a, b) {
		return {ctor: 'Rect', _0: a, _1: b};
	});
var _user$project$Graphicsvg$square = function (r) {
	return A2(_user$project$Graphicsvg$Rect, r, r);
};
var _user$project$Graphicsvg$rect = F2(
	function (w, h) {
		return A2(_user$project$Graphicsvg$Rect, w, h);
	});
var _user$project$Graphicsvg$rectangle = F2(
	function (w, h) {
		return A2(_user$project$Graphicsvg$Rect, w, h);
	});
var _user$project$Graphicsvg$Circle = function (a) {
	return {ctor: 'Circle', _0: a};
};
var _user$project$Graphicsvg$circle = function (r) {
	return _user$project$Graphicsvg$Circle(r);
};
var _user$project$Graphicsvg$Group = function (a) {
	return {ctor: 'Group', _0: a};
};
var _user$project$Graphicsvg$group = function (shapes) {
	return _user$project$Graphicsvg$Group(shapes);
};
var _user$project$Graphicsvg$ScaleXY = F3(
	function (a, b, c) {
		return {ctor: 'ScaleXY', _0: a, _1: b, _2: c};
	});
var _user$project$Graphicsvg$scale = F2(
	function (s, shape) {
		return A3(_user$project$Graphicsvg$ScaleXY, s, s, shape);
	});
var _user$project$Graphicsvg$extractShape = function (_p56) {
	var _p57 = _p56;
	var s = _user$project$Graphicsvg$f / (_user$project$Graphicsvg$f + _p57._0);
	return A2(
		_user$project$Graphicsvg$scale,
		s,
		_user$project$Graphicsvg$group(
			_elm_lang$core$Native_List.fromArray(
				[_p57._1])));
};
var _user$project$Graphicsvg$puppetShow = F3(
	function (w, h, listShapes) {
		return A3(
			_user$project$Graphicsvg$collage,
			w,
			h,
			A2(
				_elm_lang$core$List$map,
				_user$project$Graphicsvg$extractShape,
				A2(_elm_lang$core$List$sortWith, _user$project$Graphicsvg$flippedComparison, listShapes)));
	});
var _user$project$Graphicsvg$scaleX = F2(
	function (s, shape) {
		return A3(_user$project$Graphicsvg$ScaleXY, s, 1, shape);
	});
var _user$project$Graphicsvg$scaleY = F2(
	function (s, shape) {
		return A3(_user$project$Graphicsvg$ScaleXY, 1, s, shape);
	});
var _user$project$Graphicsvg$mirrorX = function (shape) {
	return A3(_user$project$Graphicsvg$ScaleXY, -1, 1, shape);
};
var _user$project$Graphicsvg$mirrorY = function (shape) {
	return A3(_user$project$Graphicsvg$ScaleXY, 1, -1, shape);
};
var _user$project$Graphicsvg$Rotate = F2(
	function (a, b) {
		return {ctor: 'Rotate', _0: a, _1: b};
	});
var _user$project$Graphicsvg$rotate = F2(
	function (theta, shape) {
		return A2(_user$project$Graphicsvg$Rotate, theta, shape);
	});
var _user$project$Graphicsvg$Move = F2(
	function (a, b) {
		return {ctor: 'Move', _0: a, _1: b};
	});
var _user$project$Graphicsvg$move = F2(
	function (disp, shape) {
		return A2(_user$project$Graphicsvg$Move, disp, shape);
	});
var _user$project$Graphicsvg$Inked = F3(
	function (a, b, c) {
		return {ctor: 'Inked', _0: a, _1: b, _2: c};
	});
var _user$project$Graphicsvg$filled = F2(
	function (color, shape) {
		return A3(_user$project$Graphicsvg$Inked, color, _elm_lang$core$Maybe$Nothing, shape);
	});
var _user$project$Graphicsvg$addOutline = F3(
	function (style, outlineClr, shape) {
		var lineStyle = {ctor: '_Tuple2', _0: style, _1: outlineClr};
		var _p58 = shape;
		switch (_p58.ctor) {
			case 'Inked':
				return A3(
					_user$project$Graphicsvg$Inked,
					_p58._0,
					_elm_lang$core$Maybe$Just(lineStyle),
					_p58._2);
			case 'Move':
				return A2(
					_user$project$Graphicsvg$Move,
					_p58._0,
					A3(_user$project$Graphicsvg$addOutline, style, outlineClr, _p58._1));
			case 'Rotate':
				return A2(
					_user$project$Graphicsvg$Rotate,
					_p58._0,
					A3(_user$project$Graphicsvg$addOutline, style, outlineClr, _p58._1));
			case 'ScaleXY':
				return A3(
					_user$project$Graphicsvg$ScaleXY,
					_p58._0,
					_p58._1,
					A3(_user$project$Graphicsvg$addOutline, style, outlineClr, _p58._2));
			default:
				return _user$project$Graphicsvg$Group(_p58._0);
		}
	});
var _user$project$Graphicsvg$RGBA = F4(
	function (a, b, c, d) {
		return {ctor: 'RGBA', _0: a, _1: b, _2: c, _3: d};
	});
var _user$project$Graphicsvg$makeTransparent = F2(
	function (alpha, shape) {
		var _p59 = shape;
		switch (_p59.ctor) {
			case 'Inked':
				if (_p59._1.ctor === 'Just') {
					return A3(
						_user$project$Graphicsvg$Inked,
						A4(_user$project$Graphicsvg$RGBA, _p59._0._0, _p59._0._1, _p59._0._2, _p59._0._3 * alpha),
						_elm_lang$core$Maybe$Just(
							{
								ctor: '_Tuple2',
								_0: _p59._1._0._0,
								_1: A4(_user$project$Graphicsvg$RGBA, _p59._1._0._1._0, _p59._1._0._1._1, _p59._1._0._1._2, _p59._1._0._1._3 * alpha)
							}),
						_p59._2);
				} else {
					return A3(
						_user$project$Graphicsvg$Inked,
						A4(_user$project$Graphicsvg$RGBA, _p59._0._0, _p59._0._1, _p59._0._2, _p59._0._3 * alpha),
						_elm_lang$core$Maybe$Nothing,
						_p59._2);
				}
			case 'Move':
				return A2(
					_user$project$Graphicsvg$Move,
					_p59._0,
					A2(_user$project$Graphicsvg$makeTransparent, alpha, _p59._1));
			case 'Rotate':
				return A2(
					_user$project$Graphicsvg$Rotate,
					_p59._0,
					A2(_user$project$Graphicsvg$makeTransparent, alpha, _p59._1));
			case 'ScaleXY':
				return A3(
					_user$project$Graphicsvg$ScaleXY,
					_p59._0,
					_p59._1,
					A2(_user$project$Graphicsvg$makeTransparent, alpha, _p59._2));
			default:
				return _user$project$Graphicsvg$Group(
					A2(
						_elm_lang$core$List$map,
						_user$project$Graphicsvg$makeTransparent(alpha),
						_p59._0));
		}
	});
var _user$project$Graphicsvg$rgb = F3(
	function (r, g, b) {
		return A4(_user$project$Graphicsvg$RGBA, r, g, b, 1);
	});
var _user$project$Graphicsvg$createGraphX = F3(
	function (h, s, x) {
		return A2(
			_user$project$Graphicsvg$move,
			{ctor: '_Tuple2', _0: x * s, _1: 0},
			A2(
				_user$project$Graphicsvg$filled,
				A3(_user$project$Graphicsvg$rgb, 135, 206, 250),
				A2(_user$project$Graphicsvg$rect, 1, h)));
	});
var _user$project$Graphicsvg$createGraphY = F3(
	function (w, s, y) {
		return A2(
			_user$project$Graphicsvg$move,
			{ctor: '_Tuple2', _0: 0, _1: y * s},
			A2(
				_user$project$Graphicsvg$filled,
				A3(_user$project$Graphicsvg$rgb, 135, 206, 250),
				A2(_user$project$Graphicsvg$rect, w, 1)));
	});
var _user$project$Graphicsvg$graphPaper = function (s) {
	return _user$project$Graphicsvg$group(
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$map,
				A2(_user$project$Graphicsvg$createGraphX, 1600, s),
				_elm_lang$core$Native_List.range(-1500 / s, 1500 / s)),
			A2(
				_elm_lang$core$List$map,
				A2(_user$project$Graphicsvg$createGraphY, 3000, s),
				_elm_lang$core$Native_List.range(-800 / s, 800 / s))));
};
var _user$project$Graphicsvg$pacman = _user$project$Graphicsvg$group(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_user$project$Graphicsvg$scale,
			1,
			A2(
				_user$project$Graphicsvg$rotate,
				_user$project$Graphicsvg$degrees(45),
				A2(
					_user$project$Graphicsvg$filled,
					A3(_user$project$Graphicsvg$rgb, 255, 255, 0),
					A2(_user$project$Graphicsvg$wedge, 100, 0.75))))
		]));
var _user$project$Graphicsvg$rgba = F4(
	function (r, g, b, a) {
		return A4(_user$project$Graphicsvg$RGBA, r, g, b, a);
	});
var _user$project$Graphicsvg$outlined = F3(
	function (style, outlineClr, shape) {
		var lineStyle = {ctor: '_Tuple2', _0: style, _1: outlineClr};
		return A3(
			_user$project$Graphicsvg$Inked,
			A4(_user$project$Graphicsvg$rgba, 0, 0, 0, 0),
			_elm_lang$core$Maybe$Just(lineStyle),
			shape);
	});
var _user$project$Graphicsvg$pink = A4(_user$project$Graphicsvg$RGBA, 255, 105, 180, 1);
var _user$project$Graphicsvg$hotPink = A4(_user$project$Graphicsvg$RGBA, 255, 0, 66, 1);
var _user$project$Graphicsvg$lightRed = A4(_user$project$Graphicsvg$RGBA, 239, 41, 41, 1);
var _user$project$Graphicsvg$red = A4(_user$project$Graphicsvg$RGBA, 204, 0, 0, 1);
var _user$project$Graphicsvg$darkRed = A4(_user$project$Graphicsvg$RGBA, 164, 0, 0, 1);
var _user$project$Graphicsvg$lightOrange = A4(_user$project$Graphicsvg$RGBA, 252, 175, 62, 1);
var _user$project$Graphicsvg$orange = A4(_user$project$Graphicsvg$RGBA, 245, 121, 0, 1);
var _user$project$Graphicsvg$darkOrange = A4(_user$project$Graphicsvg$RGBA, 206, 92, 0, 1);
var _user$project$Graphicsvg$lightYellow = A4(_user$project$Graphicsvg$RGBA, 255, 233, 79, 1);
var _user$project$Graphicsvg$yellow = A4(_user$project$Graphicsvg$RGBA, 237, 212, 0, 1);
var _user$project$Graphicsvg$darkYellow = A4(_user$project$Graphicsvg$RGBA, 196, 160, 0, 1);
var _user$project$Graphicsvg$lightGreen = A4(_user$project$Graphicsvg$RGBA, 138, 226, 52, 1);
var _user$project$Graphicsvg$green = A4(_user$project$Graphicsvg$RGBA, 115, 210, 22, 1);
var _user$project$Graphicsvg$darkGreen = A4(_user$project$Graphicsvg$RGBA, 78, 154, 6, 1);
var _user$project$Graphicsvg$lightBlue = A4(_user$project$Graphicsvg$RGBA, 114, 159, 207, 1);
var _user$project$Graphicsvg$blue = A4(_user$project$Graphicsvg$RGBA, 52, 101, 164, 1);
var _user$project$Graphicsvg$darkBlue = A4(_user$project$Graphicsvg$RGBA, 32, 74, 135, 1);
var _user$project$Graphicsvg$lightPurple = A4(_user$project$Graphicsvg$RGBA, 173, 127, 168, 1);
var _user$project$Graphicsvg$purple = A4(_user$project$Graphicsvg$RGBA, 117, 80, 123, 1);
var _user$project$Graphicsvg$darkPurple = A4(_user$project$Graphicsvg$RGBA, 92, 53, 102, 1);
var _user$project$Graphicsvg$lightBrown = A4(_user$project$Graphicsvg$RGBA, 233, 185, 110, 1);
var _user$project$Graphicsvg$brown = A4(_user$project$Graphicsvg$RGBA, 193, 125, 17, 1);
var _user$project$Graphicsvg$darkBrown = A4(_user$project$Graphicsvg$RGBA, 143, 89, 2, 1);
var _user$project$Graphicsvg$black = A4(_user$project$Graphicsvg$RGBA, 0, 0, 0, 1);
var _user$project$Graphicsvg$white = A4(_user$project$Graphicsvg$RGBA, 255, 255, 255, 1);
var _user$project$Graphicsvg$lightGrey = A4(_user$project$Graphicsvg$RGBA, 238, 238, 236, 1);
var _user$project$Graphicsvg$grey = A4(_user$project$Graphicsvg$RGBA, 211, 215, 207, 1);
var _user$project$Graphicsvg$darkGrey = A4(_user$project$Graphicsvg$RGBA, 186, 189, 182, 1);
var _user$project$Graphicsvg$lightGray = A4(_user$project$Graphicsvg$RGBA, 238, 238, 236, 1);
var _user$project$Graphicsvg$gray = A4(_user$project$Graphicsvg$RGBA, 211, 215, 207, 1);
var _user$project$Graphicsvg$darkGray = A4(_user$project$Graphicsvg$RGBA, 186, 189, 182, 1);
var _user$project$Graphicsvg$lightCharcoal = A4(_user$project$Graphicsvg$RGBA, 136, 138, 133, 1);
var _user$project$Graphicsvg$charcoal = A4(_user$project$Graphicsvg$RGBA, 85, 87, 83, 1);
var _user$project$Graphicsvg$darkCharcoal = A4(_user$project$Graphicsvg$RGBA, 46, 52, 54, 1);
var _user$project$Graphicsvg$Broken = F2(
	function (a, b) {
		return {ctor: 'Broken', _0: a, _1: b};
	});
var _user$project$Graphicsvg$dotted = function (th) {
	return A2(
		_user$project$Graphicsvg$Broken,
		_elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: th, _1: th}
			]),
		th);
};
var _user$project$Graphicsvg$dashed = function (th) {
	return A2(
		_user$project$Graphicsvg$Broken,
		_elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: th * 5, _1: th * 2.5}
			]),
		th);
};
var _user$project$Graphicsvg$generateCHLine = F2(
	function (ar, $int) {
		var p2 = function () {
			var _p60 = A2(_elm_lang$core$Array$get, $int + 1, ar);
			if (_p60.ctor === 'Just') {
				return _p60._0;
			} else {
				return {ctor: '_Tuple2', _0: 0, _1: 0};
			}
		}();
		var p1 = function () {
			var _p61 = A2(_elm_lang$core$Array$get, $int, ar);
			if (_p61.ctor === 'Just') {
				return _p61._0;
			} else {
				return {ctor: '_Tuple2', _0: 0, _1: 0};
			}
		}();
		return A3(
			_user$project$Graphicsvg$outlined,
			_user$project$Graphicsvg$dashed(0.5),
			_user$project$Graphicsvg$black,
			A2(_user$project$Graphicsvg$line, p1, p2));
	});
var _user$project$Graphicsvg$generateCHLines = function (ar) {
	var len = _elm_lang$core$Array$length(ar);
	return _user$project$Graphicsvg$group(
		A2(
			_elm_lang$core$List$map,
			_user$project$Graphicsvg$generateCHLine(ar),
			_elm_lang$core$Native_List.range(0, len - 2)));
};
var _user$project$Graphicsvg$longdash = function (th) {
	return A2(
		_user$project$Graphicsvg$Broken,
		_elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: th * 12, _1: th * 6}
			]),
		th);
};
var _user$project$Graphicsvg$dotdash = function (th) {
	return A2(
		_user$project$Graphicsvg$Broken,
		_elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: th, _1: th},
				{ctor: '_Tuple2', _0: th * 5, _1: th}
			]),
		th);
};
var _user$project$Graphicsvg$custom = F2(
	function (list, th) {
		return A2(_user$project$Graphicsvg$Broken, list, th);
	});
var _user$project$Graphicsvg$increasing = F3(
	function (s, e, th) {
		return A2(
			_user$project$Graphicsvg$Broken,
			A2(
				_elm_lang$core$List$map,
				_user$project$Graphicsvg$makePair,
				_elm_lang$core$Native_List.range(s, e)),
			th);
	});
var _user$project$Graphicsvg$Solid = function (a) {
	return {ctor: 'Solid', _0: a};
};
var _user$project$Graphicsvg$solid = function (th) {
	return _user$project$Graphicsvg$Solid(th);
};
var _user$project$Graphicsvg$Face = F7(
	function (a, b, c, d, e, f, g) {
		return {ctor: 'Face', _0: a, _1: b, _2: c, _3: d, _4: e, _5: f, _6: g};
	});
var _user$project$Graphicsvg$size = F2(
	function (size, stencil) {
		var _p62 = stencil;
		if (_p62.ctor === 'Text') {
			return A2(
				_user$project$Graphicsvg$Text,
				A7(_user$project$Graphicsvg$Face, size, _p62._0._1, _p62._0._2, _p62._0._3, _p62._0._4, _p62._0._5, _p62._0._6),
				_p62._1);
		} else {
			return _p62;
		}
	});
var _user$project$Graphicsvg$bold = function (stencil) {
	var _p63 = stencil;
	if (_p63.ctor === 'Text') {
		return A2(
			_user$project$Graphicsvg$Text,
			A7(_user$project$Graphicsvg$Face, _p63._0._0, true, _p63._0._2, _p63._0._3, _p63._0._4, _p63._0._5, _p63._0._6),
			_p63._1);
	} else {
		return _p63;
	}
};
var _user$project$Graphicsvg$italic = function (stencil) {
	var _p64 = stencil;
	if (_p64.ctor === 'Text') {
		return A2(
			_user$project$Graphicsvg$Text,
			A7(_user$project$Graphicsvg$Face, _p64._0._0, _p64._0._1, true, _p64._0._3, _p64._0._4, _p64._0._5, _p64._0._6),
			_p64._1);
	} else {
		return _p64;
	}
};
var _user$project$Graphicsvg$underline = function (stencil) {
	var _p65 = stencil;
	if (_p65.ctor === 'Text') {
		return A2(
			_user$project$Graphicsvg$Text,
			A7(_user$project$Graphicsvg$Face, _p65._0._0, _p65._0._1, _p65._0._2, true, _p65._0._4, _p65._0._5, _p65._0._6),
			_p65._1);
	} else {
		return _p65;
	}
};
var _user$project$Graphicsvg$strikethrough = function (stencil) {
	var _p66 = stencil;
	if (_p66.ctor === 'Text') {
		return A2(
			_user$project$Graphicsvg$Text,
			A7(_user$project$Graphicsvg$Face, _p66._0._0, _p66._0._1, _p66._0._2, _p66._0._3, true, _p66._0._5, _p66._0._6),
			_p66._1);
	} else {
		return _p66;
	}
};
var _user$project$Graphicsvg$selectable = function (stencil) {
	var _p67 = stencil;
	if (_p67.ctor === 'Text') {
		return A2(
			_user$project$Graphicsvg$Text,
			A7(_user$project$Graphicsvg$Face, _p67._0._0, _p67._0._1, _p67._0._2, _p67._0._3, _p67._0._4, true, _p67._0._6),
			_p67._1);
	} else {
		return _p67;
	}
};
var _user$project$Graphicsvg$Custom = function (a) {
	return {ctor: 'Custom', _0: a};
};
var _user$project$Graphicsvg$customFont = F2(
	function (fStr, stencil) {
		var _p68 = stencil;
		if (_p68.ctor === 'Text') {
			return A2(
				_user$project$Graphicsvg$Text,
				A7(
					_user$project$Graphicsvg$Face,
					_p68._0._0,
					_p68._0._1,
					_p68._0._2,
					_p68._0._3,
					_p68._0._4,
					_p68._0._5,
					_user$project$Graphicsvg$Custom(fStr)),
				_p68._1);
		} else {
			return _p68;
		}
	});
var _user$project$Graphicsvg$FixedWidth = {ctor: 'FixedWidth'};
var _user$project$Graphicsvg$Sansserif = {ctor: 'Sansserif'};
var _user$project$Graphicsvg$sansserif = function (stencil) {
	var _p69 = stencil;
	if (_p69.ctor === 'Text') {
		return A2(
			_user$project$Graphicsvg$Text,
			A7(_user$project$Graphicsvg$Face, _p69._0._0, _p69._0._1, _p69._0._2, _p69._0._3, _p69._0._4, _p69._0._5, _user$project$Graphicsvg$Sansserif),
			_p69._1);
	} else {
		return _p69;
	}
};
var _user$project$Graphicsvg$Serif = {ctor: 'Serif'};
var _user$project$Graphicsvg$text = function (str) {
	return A2(
		_user$project$Graphicsvg$Text,
		A7(_user$project$Graphicsvg$Face, 12, false, false, false, false, false, _user$project$Graphicsvg$Serif),
		str);
};
var _user$project$Graphicsvg$generateCHCircle = F2(
	function (ar, $int) {
		var p1 = function () {
			var _p70 = A2(_elm_lang$core$Array$get, $int, ar);
			if (_p70.ctor === 'Just') {
				return _p70._0;
			} else {
				return {ctor: '_Tuple2', _0: 0, _1: 0};
			}
		}();
		var ptStr = _user$project$Graphicsvg$pairToString(p1);
		return A2(
			_user$project$Graphicsvg$move,
			p1,
			_user$project$Graphicsvg$group(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_user$project$Graphicsvg$filled,
						_user$project$Graphicsvg$red,
						_user$project$Graphicsvg$circle(2)),
						A2(
						_user$project$Graphicsvg$move,
						{ctor: '_Tuple2', _0: 5, _1: 5},
						A2(
							_user$project$Graphicsvg$filled,
							_user$project$Graphicsvg$black,
							_user$project$Graphicsvg$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'(',
									A2(_elm_lang$core$Basics_ops['++'], ptStr, ')')))))
					])));
	});
var _user$project$Graphicsvg$generateCHCircles = function (ar) {
	var len = _elm_lang$core$Array$length(ar);
	return _user$project$Graphicsvg$group(
		A2(
			_elm_lang$core$List$map,
			_user$project$Graphicsvg$generateCHCircle(ar),
			_elm_lang$core$Native_List.range(0, len - 1)));
};
var _user$project$Graphicsvg$generateCurveHelper = F2(
	function (_p71, list) {
		var _p72 = _p71;
		var l1Array = _elm_lang$core$Array$fromList(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: _p72._0, _1: _p72._1}
					]),
				_elm_lang$core$List$concat(
					A2(_elm_lang$core$List$map, _user$project$Graphicsvg$createTopLevelList, list))));
		return _user$project$Graphicsvg$group(
			_elm_lang$core$Native_List.fromArray(
				[
					_user$project$Graphicsvg$generateCHLines(l1Array),
					_user$project$Graphicsvg$generateCHCircles(l1Array)
				]));
	});
var _user$project$Graphicsvg$curveHelper = function (shape) {
	var _p73 = shape;
	switch (_p73.ctor) {
		case 'Inked':
			if ((_p73._2.ctor === 'BezierPath') && (_p73._2._0.ctor === '_Tuple2')) {
				return _user$project$Graphicsvg$group(
					_elm_lang$core$Native_List.fromArray(
						[
							shape,
							A2(
							_user$project$Graphicsvg$generateCurveHelper,
							{ctor: '_Tuple2', _0: _p73._2._0._0, _1: _p73._2._0._1},
							_p73._2._1)
						]));
			} else {
				return _p73;
			}
		case 'Move':
			return A2(
				_user$project$Graphicsvg$Move,
				_p73._0,
				_user$project$Graphicsvg$curveHelper(_p73._1));
		case 'Rotate':
			return A2(
				_user$project$Graphicsvg$Rotate,
				_p73._0,
				_user$project$Graphicsvg$curveHelper(_p73._1));
		case 'ScaleXY':
			return A3(
				_user$project$Graphicsvg$ScaleXY,
				_p73._0,
				_p73._1,
				_user$project$Graphicsvg$curveHelper(_p73._2));
		default:
			return _user$project$Graphicsvg$Group(
				A2(_elm_lang$core$List$map, _user$project$Graphicsvg$curveHelper, _p73._0));
	}
};
var _user$project$Graphicsvg$Pull = F2(
	function (a, b) {
		return {ctor: 'Pull', _0: a, _1: b};
	});
var _user$project$Graphicsvg$main = {
	main: A3(
		_user$project$Graphicsvg$collage,
		600,
		625,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Graphicsvg$group(
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Graphicsvg$graphPaper(20),
						_user$project$Graphicsvg$group(
						_elm_lang$core$Native_List.fromArray(
							[
								_user$project$Graphicsvg$curveHelper(
								_user$project$Graphicsvg$group(
									_elm_lang$core$Native_List.fromArray(
										[
											A3(
											_user$project$Graphicsvg$outlined,
											_user$project$Graphicsvg$solid(2),
											_user$project$Graphicsvg$black,
											A2(
												_user$project$Graphicsvg$curve,
												{ctor: '_Tuple2', _0: 10, _1: 75},
												_elm_lang$core$Native_List.fromArray(
													[
														A2(
														_user$project$Graphicsvg$Pull,
														{ctor: '_Tuple2', _0: 50, _1: -300},
														{ctor: '_Tuple2', _0: 100, _1: -65}),
														A2(
														_user$project$Graphicsvg$Pull,
														{ctor: '_Tuple2', _0: 175, _1: 300},
														{ctor: '_Tuple2', _0: 300, _1: 65})
													]))),
											A2(
											_user$project$Graphicsvg$move,
											{ctor: '_Tuple2', _0: 100, _1: -200},
											A3(
												_user$project$Graphicsvg$outlined,
												_user$project$Graphicsvg$solid(2),
												_user$project$Graphicsvg$black,
												A2(
													_user$project$Graphicsvg$curve,
													{ctor: '_Tuple2', _0: 10, _1: 10},
													_elm_lang$core$Native_List.fromArray(
														[
															A2(
															_user$project$Graphicsvg$Pull,
															{ctor: '_Tuple2', _0: 100, _1: 100},
															{ctor: '_Tuple2', _0: -40, _1: 40})
														]))))
										]))),
								A2(
								_user$project$Graphicsvg$move,
								{ctor: '_Tuple2', _0: -200, _1: 200},
								A3(
									_user$project$Graphicsvg$outlined,
									_user$project$Graphicsvg$dotdash(2),
									_user$project$Graphicsvg$hotPink,
									A2(
										_user$project$Graphicsvg$customFont,
										'Wingdings',
										_user$project$Graphicsvg$bold(
											A2(
												_user$project$Graphicsvg$size,
												72,
												_user$project$Graphicsvg$text('Hello World!')))))),
								A2(
								_user$project$Graphicsvg$filled,
								A3(_user$project$Graphicsvg$rgb, 255, 255, 254),
								A2(_user$project$Graphicsvg$rect, 100, 200))
							]))
					]))
			]))
};
